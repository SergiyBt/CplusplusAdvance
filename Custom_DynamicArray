#include <iostream>
#include <conio.h> // for getch()
#include <string>

using namespace std;

class Array
{
private:
	long* a;	
	int nElem; // Quantity of elemens
public:
	class Exeption{
	public:
		string name;
		int value;
		Exeption(string n,int v):name(n),value(v)
		{}
	}; 
	Array(){
		a = nullptr;
		nElem = 0;
	}
	Array(int max){
		a = new long[max];
		nElem = 0;
	}
	~Array(){
		delete [] a;
	}
	int Elem(){
		return nElem;
	}
	bool find_slow(long key){ // LINER SEARCH !!!!!!!!!!!!!!!!!!!!!
		int j;
		for(j=0; j<nElem; j++)
			if(a[j] == key)
				break;
		if(j == nElem)
			return false;
		else
			return true;
	}
	int find_fast(long key){ // SEARCH BINARY !!!!!!!!!!!!!!!!!!!!!!!!
		int lowBound = 0;
		int upperBound = nElem - 1;
		int crnt;

		while(true){
			crnt = (lowBound + upperBound)/2;
			if(a[crnt] == key)
				return crnt;
			else if(lowBound > upperBound)
			 throw Exeption(" Element is not found ! ",0);
			else{
				if(a[crnt] < key)
					lowBound = crnt + 1;
				else
					upperBound = crnt - 1;			
			}		
		}
	}
	bool insert(long value){
		a[nElem] = value;
		nElem++;	
		return true;
	}
	bool delet(long value){
		int j;
		for(j=0; j<nElem; j++)
			if(value == a[j])
				break;
		if(j == nElem)
			return false;
		else{
			for(int k=j; k<nElem; k++)
				a[k] = a[k+1];
			nElem--;		
		}	
	}
	int operator[](int i){
		if(i < 0 || i >= nElem)
			throw Exeption(" Entrance for array range ! ",i);
		return a[i];
	}
	void show(){
		for(int j=0; j<nElem; j++)
		cout<<" [ "<<j<<" ] = "<<a[j]<<endl;
	}
	/* ostream& operator<<(ostream& os,Array& a){
		for(int j=0; j<a.nElem; j++)
		os<<" [ "<<j<<" ] = "<<a[j]<<endl;
		return os;
	} */
};


int main(){
	
	Array arr(100);

	for(int i=0; i<100; i++)
	arr.insert(i);
	
	arr.show();

	try{

	int index = arr.find_fast(230);
	cout<<" Found element index = "<<index;
		
	}catch(Array::Exeption ex){
		cout<<" Error massage: "<<ex.name<<endl;
		cout<<" Error value: "<<ex.value;
	}
	arr.delet(34);
	arr.delet(50);

	arr.show();
	
	
_getch();
return 0;
}
